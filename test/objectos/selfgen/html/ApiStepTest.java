/*
 * Copyright (C) 2015-2023 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package objectos.selfgen.html;

import static org.testng.Assert.assertEquals;

import org.testng.annotations.Test;

public class ApiStepTest {

  @Test
  public void execute() {
    HtmlSelfGen spec;
    spec = new HtmlSelfGen() {
      @Override
      protected final void definition() {
        element("a").simpleName("Anchor");

        element("div");

        element("meta")
            .noEndTag();

        element("option")
            .attribute("disabled").booleanType()
            .attribute("label");

        element("select")
            .attribute("disabled").booleanType();
      }
    }.prepare();

    ApiStep template;
    template = new ApiStep(spec);

    assertEquals(
        template.toString(),

        """
/*
 * Copyright (C) 2015-2024 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package objectos.html;

import java.util.Iterator;

/**
 * Defines the types of the {@link Html} domain-specific language.
 */
// Generated by objectos.selfgen.HtmlSpec. Do not edit!
public final class Api {
  static final Attribute ATTRIBUTE = new Attribute();

  static final Element ELEMENT = new Element();

  static final Fragment FRAGMENT = new Fragment();

  static final NoOp NOOP = new NoOp();

  private Api() {}

  /**
   * Represents an instruction that generates part of the output of an HTML template.
   *
   * <p>
   * Unless noted references to a particular instruction MUST NOT be reused.
   */
  public sealed interface Instruction {}

  /**
   * Allowed as an argument to the {@code a} element method.
   */
  public sealed interface AnchorValue extends Instruction {}

  /**
   * Allowed as an argument to the {@code div} element method.
   */
  public sealed interface DivValue extends Instruction {}

  /**
   * Allowed as an argument to the {@code meta} element method.
   */
  public sealed interface MetaValue extends Instruction {}

  /**
   * Allowed as an argument to the {@code option} element method.
   */
  public sealed interface OptionValue extends Instruction {}

  /**
   * Allowed as an argument to the {@code select} element method.
   */
  public sealed interface SelectValue extends Instruction {}


  /**
   * The {@code disabled} attribute.
   */
  public sealed interface DisabledAttribute
      extends
      OptionValue,
      SelectValue {}


  /**
   * Represents an HTML global attribute such as the {@code id} attribute for example.
   */
  public sealed interface GlobalAttribute
      extends
      AnchorValue,
      DivValue,
      MetaValue,
      OptionValue,
      SelectValue {}

  /**
   * An instruction for an HTML attribute provided by an external object.
   */
  public sealed interface ExternalAttribute extends GlobalAttribute {

    /**
     * Represents a single {@code id} attribute.
     */
    non-sealed interface Id extends ExternalAttribute {
      /**
       * The value of this {@code id} attribute.
       *
       * @return the value of this {@code id} attribute
       */
      String id();
    }

    /**
     * Represents a single {@code class} attribute.
     */
    non-sealed interface StyleClass extends ExternalAttribute {
      /**
       * The value of this {@code class} attribute.
       *
       * @return the value of this {@code class} attribute
       */
      String className();
    }

    /**
     * Represents a set of {@code class} attributes.
     */
    non-sealed interface StyleClassSet extends ExternalAttribute {
      /**
       * Iterator over the {@code class} attribute values of this set.
       *
       * @return an iterator over the values of this set
       */
      Iterator<String> classNames();
    }
  }

  /**
   * The attribute instruction.
   */
  static final class Attribute
      implements
      DisabledAttribute,
      GlobalAttribute {
    Attribute() {}
  }

  /**
   * The element instruction.
   */
  public static final class Element
      implements
      AnchorValue,
      DivValue,
      OptionValue,
      SelectValue {
    Element() {}
  }

  /**
   * The fragment instruction.
   */
  public static final class Fragment
      implements
      AnchorValue,
      DivValue,
      MetaValue,
      OptionValue,
      SelectValue {
    Fragment() {}
  }

  /**
   * The no-op instruction.
   */
  public static final class NoOp
      implements
      AnchorValue,
      DivValue,
      MetaValue,
      OptionValue,
      SelectValue {
    private NoOp() {}
  }
}
"""
    );
  }

}