/*
 * Copyright (C) 2015-2023 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package objectos.selfgen.html;

import static org.testng.Assert.assertEquals;

import org.testng.annotations.Test;

public class HtmlCompilerAttributesStepTest {

  @Test
  public void execute() {
    HtmlSelfGen spec;
    spec = TestingHtmlSelfGen.SPEC;

    HtmlCompilerAttributesStep template;
    template = new HtmlCompilerAttributesStep(spec);

    assertEquals(
        template.toString(),

        """
/*
 * Copyright (C) 2015-2024 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package objectos.way;

import objectos.lang.object.Check;

/**
 * Provides methods for rendering HTML attributes.
 */
// Generated by objectos.selfgen.HtmlSpec. Do not edit!
abstract class HtmlCompilerAttributes extends HtmlRecorder {

  HtmlCompilerAttributes() {}

  /**
   * Generates the {@code disabled} boolean attribute.
   *
   * @return an instruction representing this attribute.
   */
  public final Html.AttributeInstruction disabled() {
    return attribute0(HtmlAttributeName.DISABLED);
  }

  /**
   * Generates the {@code label} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Html.AttributeInstruction label(String value) {
    Check.notNull(value, "value == null");
    return attribute0(HtmlAttributeName.LABEL, value);
  }

  /**
   * Generates the {@code lang} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Html.AttributeInstruction lang(String value) {
    Check.notNull(value, "value == null");
    return attribute0(HtmlAttributeName.LANG, value);
  }

}
"""
    );
  }

}
