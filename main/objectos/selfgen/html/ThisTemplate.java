/*
 * Copyright (C) 2015-2023 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package objectos.selfgen.html;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.List;
import java.util.function.BiFunction;
import java.util.stream.Collectors;
import objectos.code.ClassName;
import objectos.code.Code;
import objectos.code.Code.ImportList;
import objectos.selfgen.util.Check;

abstract class ThisTemplate {

  static final String COPYRIGHT_YEARS = "2015-2024";

  static final String GENERATED_MSG = "// Generated by objectos.selfgen.HtmlSpec. Do not edit!";

  static final String WAY_PACKAGE = "objectos.way";

  static final ClassName CHECK = ClassName.of("objectos.lang.object", "Check");

  final HtmlSelfGen spec;

  final Code code;

  ClassName className;

  ImportList importList;

  String packageName;

  String simpleName;

  public ThisTemplate(HtmlSelfGen spec) {
    this.spec = spec;

    code = spec.code;
  }

  @Override
  public final String toString() {
    return contents();
  }

  public void writeTo(Path directory) throws IOException {
    String contents;
    contents = contents();

    Path file;
    file = className.toPath(directory);

    Files.writeString(
        file, contents, StandardCharsets.UTF_8,
        StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING
    );
  }

  final String attributeMethods(BiFunction<String, AttributeSpec, String> function) {
    List<String> methods;
    methods = new ArrayList<>();

    TemplateSpec template;
    template = spec.template();

    for (var attribute : spec.attributes()) {
      for (String name : attribute.methodNames()) {
        if (!template.shouldIncludeAttribute(name)) {
          continue;
        }

        String method;
        method = function.apply(name, attribute);

        methods.add(method);
      }
    }

    return methods.stream().collect(Collectors.joining("\n"));
  }

  final void className(ClassName className) {
    this.className = Check.notNull(className, "className == null");

    packageName = this.className.packageName();

    simpleName = this.className.simpleName();

    importList = code.importList(packageName);
  }

  final String elementMethods(BiFunction<TemplateSpec, ElementSpec, String> function) {
    List<String> methods;
    methods = new ArrayList<>();

    TemplateSpec template;
    template = spec.template();

    for (var element : spec.elements()) {
      String method;
      method = function.apply(template, element);

      methods.add(method);
    }

    return methods.stream().collect(Collectors.joining("\n"));
  }

  abstract String contents();

}