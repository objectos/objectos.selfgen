/*
 * Copyright (C) 2015-2023 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package objectos.selfgen.html;

import java.util.ArrayList;
import java.util.List;
import java.util.function.BiFunction;
import java.util.stream.Collectors;
import objectos.code.ClassName;

final class HtmlGenerated extends ThisTemplate {

  HtmlGenerated(HtmlSelfGen spec) {
    super(spec);
  }

  @Override
  final String contents() {
    className(ClassName.of(WAY_PACKAGE, "Html"));

    return code."""
    /*
     * Copyright (C) \{COPYRIGHT_YEARS} Objectos Software LTDA.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    package \{packageName};
    \{importList}
    /**
     * The Objectos HTML main class.
     */
    public final class \{simpleName} {

      private \{simpleName}() {}

      // The code below was generated by objectos.selfgen.HtmlSpec. Do not edit!

    \{attributes()}
    }
    """;
  }
  
  private String attributes() {
    return code."""
      /**
       * Represents an instruction that generates part of the output of an HTML
       * template.
       *
       * <p>
       * Unless noted references to a particular instruction MUST NOT be reused.
       */
      public sealed interface Instruction {}
    
      /**
       * An attribute instruction in an HTML template.
       */
      public sealed interface AttributeInstruction extends Instruction {}
    
      private static final class HtmlAttributeInstruction implements AttributeInstruction {}
    
      static final AttributeInstruction ATTRIBUTE = new HtmlAttributeInstruction();
    
    \{templateAttributes()}    
    \{compilerAttributes()}""";
  }
  
  private String templateAttributes() {
    return code."""
      /**
       * Provides methods the HTML attributes template methods.
       */
      public static abstract class TemplateAttributes {
      
        TemplateAttributes() {}
  
    \{templateAttributesMethods()}
        abstract CompilerAttributes $compiler();
        
      }
    """;
  }
  
  private String templateAttributesMethods() {
    return attributeMethods((name, attribute) -> {
      AttributeKind kind;
      kind = attribute.kind();

      if (kind.isString()) {
        return code."""
              /**
               * Generates the {@code \{attribute.name()}} attribute with the specified value.
               *
               * @param value
               *        the value of the attribute
               *
               * @return an instruction representing this attribute.
               */
              protected final AttributeInstruction \{name}(String value) {
                return $compiler().\{name}(value);
              }
          """;
      } else {
        return code."""
              /**
               * Generates the {@code \{attribute.name()}} boolean attribute.
               *
               * @return an instruction representing this attribute.
               */
              protected final AttributeInstruction \{name}() {
                return $compiler().\{name}();
              }
          """;
      }
    });
  }
  
  private String compilerAttributes() {
    return code."""
      /**
       * Provides the HTML attributes compiler methods.
       */
      public sealed interface CompilerAttributes permits Compiler {
    
    \{compilerAttributesMethods()}
      }
    """;
  }
  
  private String compilerAttributesMethods() {
    return attributeMethods((name, attribute) -> {
      AttributeKind kind;
      kind = attribute.kind();

      if (kind.isString()) {
        return code."""
              /**
               * Compiles the {@code \{attribute.name()}} attribute with the specified value.
               *
               * @param value
               *        the value of the attribute
               *
               * @return an instruction representing this attribute.
               */
              AttributeInstruction \{name}(String value);
          """;
      } else {
        return code."""
              /**
               * Compiles the {@code \{attribute.name()}} boolean attribute.
               *
               * @return an instruction representing this attribute.
               */
              AttributeInstruction \{name}();
          """;
      }
    });
  }
  
  private String attributeMethods(BiFunction<String, AttributeSpec, String> function) {
    List<String> methods;
    methods = new ArrayList<>();

    TemplateSpec template;
    template = spec.template();

    for (var attribute : spec.attributes()) {
      for (String name : attribute.methodNames()) {
        if (!template.shouldIncludeAttribute(name)) {
          continue;
        }

        String method;
        method = function.apply(name, attribute);
        
        methods.add(method);
      }
    }

    return methods.stream().collect(Collectors.joining("\n"));
  }

}