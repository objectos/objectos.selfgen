/*
 * Copyright (C) 2015-2023 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package objectos.selfgen.html;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import objectos.code.ClassName;

final class HtmlStep extends ThisTemplate {

  HtmlStep(HtmlSelfGen spec) {
    super(spec);
  }

  @Override
  final String contents() {
    className(ClassName.of(WAY_PACKAGE, "Html"));

    return code."""
    /*
     * Copyright (C) \{COPYRIGHT_YEARS} Objectos Software LTDA.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    package \{packageName};
    \{importList}
    /**
     * The Objectos HTML main class.
     */
    public final class \{simpleName} {

      // The code below was generated by objectos.selfgen.HtmlSpec. Do not edit!

    \{instructions()}
    \{attributes()}
    \{elements()}
    }
    """;
  }

  private String instructions() {
    return code."""
      /**
       * Represents an instruction that generates part of the output of an HTML
       * template.
       */
      public sealed interface Instruction {}

      /**
       * Class of instructions that are represented by methods of the template class.
       *
       * <p>
       * Instances of this interface MUST NOT be reused in a template.
       */
      public sealed interface MethodInstruction extends Instruction {}

      /**
       * Class of instructions that are allowed as arguments to template
       * methods that represent void elements.
       */
      public sealed interface VoidInstruction extends Instruction {}

      /**
       * An instruction to generate an HTML attribute in template.
       */
      public sealed interface AttributeInstruction extends MethodInstruction, VoidInstruction {}

      /**
       * An instruction to generate an HTML element in a template.
       */
      public sealed interface ElementInstruction extends MethodInstruction {}

      /**
       * An instruction to include an HTML fragment to a template.
       */
      public sealed interface FragmentInstruction extends MethodInstruction, VoidInstruction {}

      /**
       * The no-op instruction.
       */
      public sealed interface NoOpInstruction extends MethodInstruction, VoidInstruction {}

      private static final class InstructionImpl
           implements
           AttributeInstruction,
           ElementInstruction,
           FragmentInstruction,
           NoOpInstruction {}

      static final AttributeInstruction ATTRIBUTE = new InstructionImpl();
      static final ElementInstruction ELEMENT = new InstructionImpl();
      static final FragmentInstruction FRAGMENT = new InstructionImpl();
      static final NoOpInstruction NOOP = new InstructionImpl();

      /**
       * Class of instructions that are represented by object instances.
       *
       * <p>
       * Instances of this interface can be safely reused in multiple templates.
       */
      public sealed interface ObjectInstruction extends Instruction {}

      /**
       * The value of an HTML {@code class} attribute.
       */
      public sealed interface ClassName extends ObjectInstruction, VoidInstruction {

        /**
         * The {@code class} value.
         *
         * @return the {@code class} value
         */
        String value();

      }

      record HtmlClassName(String value) implements ClassName {}

      /**
       * The value of an HTML {@code id} attribute.
       */
      public sealed interface Id extends ObjectInstruction, VoidInstruction {

        /**
         * The {@code id} value.
         *
         * @return the {@code id} value
         */
        String value();

      }

      record HtmlId(String value) implements Id {}
    """;
  }

  private String attributes() {
    return code."""
    \{templateAttributes()}
    \{compilerAttributes()}""";
  }

  private String templateAttributes() {
    return code."""
      /**
       * Provides the HTML attributes template methods.
       */
      public sealed static abstract class TemplateAttributes {

        TemplateAttributes() {}

    \{templateAttributesMethods()}
        abstract CompilerAttributes $attributes();

      }
    """;
  }

  private String templateAttributesMethods() {
    return attributeMethods((name, attribute) -> {
      AttributeKind kind;
      kind = attribute.kind();

      if (kind.isString()) {
        return code."""
                /**
                 * Generates the {@code \{attribute.name()}} attribute with the specified value.
                 *
                 * @param value
                 *        the value of the attribute
                 *
                 * @return an instruction representing this attribute.
                 */
                protected final AttributeInstruction \{name}(String value) {
                  return $attributes().\{name}(value);
                }
            """;
      } else {
        return code."""
                /**
                 * Generates the {@code \{attribute.name()}} boolean attribute.
                 *
                 * @return an instruction representing this attribute.
                 */
                protected final AttributeInstruction \{name}() {
                  return $attributes().\{name}();
                }
            """;
      }
    });
  }

  private String compilerAttributes() {
    return code."""
      /**
       * Provides the HTML attributes compiler methods.
       */
      public sealed interface CompilerAttributes permits Compiler {

    \{compilerAttributesMethods()}
      }
    """;
  }

  private String compilerAttributesMethods() {
    return attributeMethods((name, attribute) -> {
      AttributeKind kind;
      kind = attribute.kind();

      if (kind.isString()) {
        return code."""
                /**
                 * Generates the {@code \{attribute.name()}} attribute with the specified value.
                 *
                 * @param value
                 *        the value of the attribute
                 *
                 * @return an instruction representing this attribute.
                 */
                AttributeInstruction \{name}(String value);
            """;
      } else {
        return code."""
                /**
                 * Generates the {@code \{attribute.name()}} boolean attribute.
                 *
                 * @return an instruction representing this attribute.
                 */
                AttributeInstruction \{name}();
            """;
      }
    });
  }

  private String elements() {
    return code."""
      \{templateElements()}
      \{compilerElements()}""";
  }

  private String templateElements() {
    return code."""
        /**
         * Provides the HTML elements template methods.
         */
        public non-sealed static abstract class TemplateElements extends TemplateAttributes {

          /**
           * Sole constructor.
           */
          TemplateElements() {}

          /**
           * Generates the {@code <!DOCTYPE html>} doctype.
           */
          protected final void doctype() {
            $elements().doctype();
          }

      \{templateElementsMethods()}
          abstract CompilerElements $elements();

        }
      """;
  }

  private String templateElementsMethods() {
    List<String> methods;
    methods = new ArrayList<>();

    TemplateSpec template;
    template = spec.template();

    for (var element : spec.elements()) {
      String methodName;
      methodName = element.methodName();

      String paramTypeName;
      paramTypeName = element.hasEndTag() ? "Instruction" : "VoidInstruction";

      methods.add(code."""
          /**
           * Generates the {@code \{element.name()}} element with the specified content.
           *
           * @param contents
           *        the attributes and children of this element
           *
           * @return an instruction representing this element.
           */
          protected final ElementInstruction \{methodName}(\{paramTypeName}... contents) {
            return $elements().\{methodName}(contents);
          }
      """);

      if (template.shouldIncludeText(element)) {

        methods.add(code."""
            /**
             * Generates the {@code \{element.name()}} element with the specified text.
             *
             * @param text
             *        the text value of this element
             *
             * @return an instruction representing this element.
             */
            protected final ElementInstruction \{methodName}(String text) {
              return $elements().\{methodName}(text);
            }
        """);

      } else if (spec.isAmbiguous(element)) {

        methods.add(code."""
            /**
             * Generates the {@code \{element.name()}} attribute or element with the specified text.
             *
             * @param text
             *        the text value of this attribute or element
             *
             * @return an instruction representing this attribute or element.
             */
            protected final ElementInstruction \{methodName}(String text) {
              return $elements().\{methodName}(text);
            }
        """);

      }
    }

    return methods.stream().collect(Collectors.joining("\n"));
  }

  private String compilerElements() {
    return code."""
      /**
       * Provides the HTML elements compiler methods.
       */
      public sealed interface CompilerElements permits Compiler {

        /**
         * Generates the {@code <!DOCTYPE html>} doctype.
         */
        void doctype();

    \{compilerElementsMethods()}
      }
    """;
  }

  private String compilerElementsMethods() {
    List<String> methods;
    methods = new ArrayList<>();

    TemplateSpec template;
    template = spec.template();

    for (var element : spec.elements()) {
      String methodName;
      methodName = element.methodName();

      String paramTypeName;
      paramTypeName = element.hasEndTag() ? "Instruction" : "VoidInstruction";

      methods.add(code."""
          /**
           * Generates the {@code \{element.name()}} element with the specified content.
           *
           * @param contents
           *        the attributes and children of this element
           *
           * @return an instruction representing this element.
           */
          ElementInstruction \{methodName}(\{paramTypeName}... contents);
      """);

      if (template.shouldIncludeText(element)) {

        methods.add(code."""
            /**
             * Generates the {@code \{element.name()}} element with the specified text.
             *
             * @param text
             *        the text value of this element
             *
             * @return an instruction representing this element.
             */
            ElementInstruction \{methodName}(String text);
        """);

      } else if (spec.isAmbiguous(element)) {

        methods.add(code."""
            /**
             * Generates the {@code \{element.name()}} attribute or element with the specified text.
             *
             * @param text
             *        the text value of this attribute or element
             *
             * @return an instruction representing this attribute or element.
             */
            ElementInstruction \{methodName}(String text);
        """);

      }
    }

    return methods.stream().collect(Collectors.joining("\n"));
  }

}